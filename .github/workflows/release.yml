name: Release

on:
  workflow_dispatch:
    inputs:
      type:
        description: 'Release type (major, minor, patch)'
        required: true
        type: choice
        options:
          - major
          - minor
          - patch
        default: 'patch'
      release_notes:
        description: 'Release notes'
        required: false
        type: string

jobs:
  calculate-version:
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.calc-version.outputs.new_version }}
      version_number: ${{ steps.calc-version.outputs.version_number }}
      branch_name: ${{ steps.calc-version.outputs.branch_name }}
    steps:
      - name: Get latest release
        id: get-latest
        uses: actions/github-script@v7
        with:
          script: |
            for (let attempt = 0; attempt < 3; attempt++) {
              try {
                const latest = await github.rest.repos.getLatestRelease({
                  owner: context.repo.owner,
                  repo: context.repo.repo
                });
                return latest.data.tag_name;
              } catch (e) {
                if (e.status === 404) return 'v0.0.0';
                if (attempt === 2) throw e;
                await new Promise(r => setTimeout(r, 1000 * Math.pow(2, attempt)));
              }
            }
          result-encoding: string

      - name: Calculate new version
        id: calc-version
        run: |
          LATEST="${{ steps.get-latest.outputs.result }}"
          # Remove 'v' prefix if present
          LATEST=${LATEST#v}
          # Split version into major, minor, patch
          IFS='.' read -r MAJOR MINOR PATCH <<< "$LATEST"
          # Remove any pre-release or build metadata from patch
          PATCH=${PATCH%%-*}
          PATCH=${PATCH%%+*}
          
          # Increment version based on type
          case "${{ inputs.type }}" in
            major)
              NEW_VERSION="$((MAJOR + 1)).0.0"
              ;;
            minor)
              NEW_VERSION="${MAJOR}.$((MINOR + 1)).0"
              ;;
            patch)
              NEW_VERSION="${MAJOR}.${MINOR}.$((PATCH + 1))"
              ;;
          esac
          
          echo "New version: v${NEW_VERSION}"
          echo "new_version=v${NEW_VERSION}" >> "$GITHUB_OUTPUT"
          echo "version_number=${NEW_VERSION}" >> "$GITHUB_OUTPUT"
          echo "branch_name=release/v${NEW_VERSION}" >> "$GITHUB_OUTPUT"

  update-version:
    needs: calculate-version
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT_TOKEN }}
          ref: master

      - name: Configure Git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git remote set-url origin https://x-access-token:${{ secrets.PAT_TOKEN }}@github.com/${{ github.repository }}

      - name: Update version in build.gradle.kts
        run: |
          # Update version in build.gradle.kts
          sed -i "s/version = \".*\"/version = \"${{ needs.calculate-version.outputs.version_number }}\"/" build.gradle.kts

      - name: Commit and push to master
        run: |
          git add build.gradle.kts
          git commit -m "chore: update version to ${{ needs.calculate-version.outputs.new_version }}"
          git push origin master

  create-release-branch:
    needs: update-version
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT_TOKEN }}
          ref: master

      - name: Configure Git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git remote set-url origin https://x-access-token:${{ secrets.PAT_TOKEN }}@github.com/${{ github.repository }}

      - name: Create and push release branch
        run: |
          git checkout -b ${{ needs.calculate-version.outputs.branch_name }}
          git tag ${{ needs.calculate-version.outputs.new_version }}
          git push --set-upstream origin ${{ needs.calculate-version.outputs.branch_name }}
          git push --tags

  build-and-test:
    needs: create-release-branch
    uses: ./.github/workflows/build-test.yml

  publish:
    needs: [calculate-version, build-and-test]
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ needs.calculate-version.outputs.branch_name }}
          token: ${{ secrets.PAT_TOKEN }}

      - name: Download build artifacts
        id: download
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: release

      - name: Retry download on failure
        if: failure() && steps.download.outcome == 'failure'
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: release

      - name: Upload Release Assets
        uses: softprops/action-gh-release@v1
        with:
          files: release/*
          tag_name: ${{ needs.calculate-version.outputs.new_version }}
          draft: false
          prerelease: false
          body: ${{ inputs.release_notes }}
          generate_release_notes: ${{ inputs.release_notes == '' }}
          target_commitish: ${{ needs.calculate-version.outputs.branch_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}